# -*- mode: ruby -*-
# vi: set ft=ruby :

# *Variables
box        = "ubuntu/jammy64"
provider   = "virtualbox"
boxname    = "UbuntuVB"
# network configuration
ip_addr    = "192.168.56.61"
# vm configuration
memory     = 4096
cpu        = 2

# calculate global variables
hostname = boxname.downcase

# *Scripts
script_install_packages = <<~SCRIPT
  export DEBIAN_FRONTEND=noninteractive
  apt-get update && apt-get install -y btop nano
SCRIPT

script_configure_static_ip = <<~SCRIPT
  grep -qw "eth1:$" /etc/netplan/01-netcfg.yaml || cat <<"EOF" >>/etc/netplan/01-netcfg.yaml
      eth1:
        dhcp4: false
        dhcp6: false
        addresses: [#{ip_addr}/24]
  EOF
  netplan generate
SCRIPT

# *VM provisioning
Vagrant.configure("2") do |config|
  # common triggers
  config.trigger.before :up do |trigger|
    trigger.info = "Cleaning up VirtualBox VM folder..."
    trigger.run = {
      privileged: "false", powershell_elevated_interactive: "false",
      path: "../../.assets/trigger/cleanup_vbox_vm.ps1", :args => [boxname]
    }
  end
  # common config
  if Vagrant.has_plugin?("vagrant-vbguest") then
    config.vbguest.auto_update = false
  end
  config.vm.boot_timeout = 300
  config.vm.graceful_halt_timeout = 300
  config.vm.synced_folder ".", "/vagrant", type: "virtualbox"
  config.vm.define boxname do |node|
    identity_file = "#{Dir.pwd}/.vagrant/machines/#{boxname}/#{provider}/private_key"
    # node triggers
    node.trigger.after :up do |trigger|
      trigger.info = "Set inotify settings..."
      trigger.run_remote = { privileged: true, path: "../../.assets/trigger/set_inotify.sh" }
    end
    node.trigger.after :reload do |trigger|
      trigger.info = "Add vagrant configuration to ssh config file..."
      trigger.run = {
        privileged: "false", powershell_elevated_interactive: "false",
        path: "../../.assets/trigger/set_ssh_config.ps1", :args => [ip_addr, hostname, identity_file]
      }
    end
    config.trigger.after :destroy do |trigger|
      trigger.info = "Cleaning up ssh config, known_hosts files and .vagrant directory..."
      trigger.run = {
        privileged: "false", powershell_elevated_interactive: "false",
        path: "../../.assets/trigger/delete_ssh_config.ps1", :args => [ip_addr, hostname]
      }
    end
    # node setup
    node.vm.box = box
    node.vm.hostname = hostname
    node.vm.network "private_network", ip: ip_addr
    node.vm.provider provider do |vb|
      vb.name = boxname
      vb.memory = memory
      vb.cpus = cpu
      vb.customize [
        "modifyvm", :id,
        "--cableconnected1", "on",
        "--graphicscontroller", "vmsvga",
        "--accelerate3d", "on"
      ]
    end
    # node provision
    node.vm.provision "shell", name: "configure static ip", inline: script_configure_static_ip
    node.vm.provision "shell", name: "install packages...", inline: script_install_packages
    node.vm.provision "shell", name: "install base...", path: "../../.assets/provision/install_base.sh"
    node.vm.provision "shell", name: "install exa...", path: "../../.assets/provision/install_exa.sh"
    node.vm.provision "shell", name: "install bat...", path: "../../.assets/provision/install_bat.sh"
    node.vm.provision "shell", name: "install ripgrep...", path: "../../.assets/provision/install_ripgrep.sh"
    node.vm.provision "shell", name: "install Gnome...", path: "../../.assets/provision/install_gnome.sh"
    node.vm.provision "shell", name: "install Edge...", path: "../../.assets/provision/install_edge.sh"
    # ~setting up profiles
    node.vm.provision "shell", name: "install oh-my-posh...", path: "../../.assets/provision/install_omp.sh"
    node.vm.provision "shell", name: "install PowerShell...", path: "../../.assets/provision/install_pwsh.sh"
    node.vm.provision "file", source: "../../.assets/config", destination: "/tmp/"
    node.vm.provision "shell", name: "set up PS for all users...", path: "../../.assets/provision/setup_profiles_allusers.sh"
    node.vm.provision "shell", name: "set up user profile...", path: "../../.assets/provision/setup_profiles_user.sh", privileged: false
    # ~upgrade system
    node.vm.provision "shell", name: "upgrade system...", path: "../../.assets/provision/upgrade_system.sh"
    # ~reload vm
    node.vm.provision :reload
  end
end
