# -*- mode: ruby -*-
# vi: set ft=ruby :

# *Variables
box      = "generic/fedora37"
provider = "virtualbox"
boxname  = "Fedora"
# network configuration
ip_addr  = "192.168.56.57"
# vm configuration
memory   = 8192
cpu      = 2
# conditions
install_packages   = true
install_kubernetes = true
install_gnome      = true
install_edge       = true
setup_bash         = true
setup_pwsh         = true
upgrade_system     = true

# calculate global variables
vmname   = "Vg-#{boxname}"
hostname = "#{vmname.downcase}-vb"

# *Scripts
script_install_packages = <<~SCRIPT
  dnf install -y \\
    @development-tools \\
    fedora-workstation-repositories \\
    dnf-plugins-core 'dnf-command(offline-upgrade)' \\
    btop nano
SCRIPT

script_configure_static_ip = <<~SCRIPT
  nmcli connection modify 'Wired connection 1' \\
    ipv4.method manual \\
    ipv4.addresses #{ip_addr}/24
SCRIPT

# *VM provisioning
Vagrant.configure("2") do |config|
  # common triggers
  config.trigger.before :up do |trigger|
    trigger.info = "Cleaning up VirtualBox VM folder..."
    trigger.run = {
      privileged: "false", powershell_elevated_interactive: "false",
      path: "../../.assets/trigger/cleanup_vbox_vm.ps1", :args => [boxname]
    }
  end
  # common config
  if Vagrant.has_plugin?("vagrant-vbguest") then
    config.vbguest.auto_update = false
  end
  config.vm.boot_timeout = 300
  config.vm.graceful_halt_timeout = 300
  config.vm.synced_folder ".", "/vagrant", type: "virtualbox"
  config.vm.define boxname do |node|
    identity_file = "#{Dir.pwd}/.vagrant/machines/#{boxname}/#{provider}/private_key"
    # node triggers
    node.trigger.after :up do |trigger|
      trigger.info = "Set inotify settings..."
      trigger.run_remote = { privileged: true, path: "../../.assets/trigger/set_inotify.sh" }
    end
    node.trigger.after :reload do |trigger|
      trigger.info = "Add vagrant configuration to ssh config file..."
      trigger.run = {
        privileged: "false", powershell_elevated_interactive: "false",
        path: "../../.assets/trigger/set_ssh_config.ps1", :args => [ip_addr, hostname, identity_file]
      }
    end
    config.trigger.after :destroy do |trigger|
      trigger.info = "Cleaning up ssh config, known_hosts files and .vagrant directory..."
      trigger.run = {
        privileged: "false", powershell_elevated_interactive: "false",
        path: "../../.assets/trigger/delete_ssh_config.ps1", :args => [ip_addr, hostname]
      }
    end
    # node setup
    node.vm.box = box
    node.vm.hostname = hostname
    node.vm.network "private_network", ip: ip_addr
    node.vm.provider provider do |vb|
      vb.name = vmname
      vb.memory = memory
      vb.cpus = cpu
      vb.customize [
        "modifyvm", :id,
        "--cableconnected1", "on",
        "--graphicscontroller", "vmsvga",
        "--accelerate3d", "on"
      ]
    end
    # node provision
    node.vm.provision "shell", name: "configure static ip", inline: script_configure_static_ip
    node.vm.provision "shell", name: "fix secure path setting for sudo", path: "../../.assets/provision/fix_sudo.sh"
    node.vm.provision "shell", name: "install base...", path: "../../.assets/provision/install_base.sh"
    if install_packages
      node.vm.provision "shell", name: "install packages...", inline: script_install_packages
      node.vm.provision "shell", name: "install exa...", path: "../../.assets/provision/install_exa.sh"
      node.vm.provision "shell", name: "install bat...", path: "../../.assets/provision/install_bat.sh"
      node.vm.provision "shell", name: "install ripgrep...", path: "../../.assets/provision/install_ripgrep.sh"
    end
    if install_kubernetes
      node.vm.provision "shell", name: "set ulimits on systemd", path: "../../.assets/provision/set_ulimits.sh"
      node.vm.provision "shell", name: "install yq...", path: "../../.assets/provision/install_yq.sh"
      node.vm.provision "shell", name: "install docker...", path: "../../.assets/provision/install_docker.sh"
      node.vm.provision "shell", name: "install kubectl...", path: "../../.assets/provision/install_kubectl.sh"
      node.vm.provision "shell", name: "install helm...", path: "../../.assets/provision/install_helm.sh"
      node.vm.provision "shell", name: "install minikube...", path: "../../.assets/provision/install_minikube.sh"
      node.vm.provision "shell", name: "install k3d...", path: "../../.assets/provision/install_k3d.sh"
      node.vm.provision "shell", name: "install k9s...", path: "../../.assets/provision/install_k9s.sh"
      node.vm.provision "shell", name: "install flux...", path: "../../.assets/provision/install_flux.sh"
      node.vm.provision "shell", name: "install kubeseal...", path: "../../.assets/provision/install_kubeseal.sh"
      node.vm.provision "shell", name: "install kustomize...", path: "../../.assets/provision/install_kustomize.sh"
      node.vm.provision "shell", name: "install argo-rollouts cli...", path: "../../.assets/provision/install_argorolloutscli.sh"
      node.vm.provision "shell", name: "install npm...", path: "../../.assets/provision/install_npm.sh"
      node.vm.provision "shell", name: "install smee...", path: "../../.assets/provision/install_smee.sh"
    end
    if install_gnome
      node.vm.provision "shell", name: "install Gnome...", path: "../../.assets/provision/install_gnome.sh"
      node.vm.provision "shell", name: "set up Gnome...", path: "../../.assets/provision/setup_gnome.sh", privileged: false
      if install_edge
        node.vm.provision "shell", name: "install Edge...", path: "../../.assets/provision/install_edge.sh"
      end
    end
    if setup_bash || setup_pwsh
      node.vm.provision "file", source: "../../.assets/config", destination: "/tmp/"
      node.vm.provision "shell", name: "install oh-my-posh...", path: "../../.assets/provision/install_omp.sh"
      node.vm.provision "shell", name: "set up oh-my-posh...", path: "../../.assets/provision/setup_omp.sh"
    end
    if setup_bash
      node.vm.provision "shell", name: "set up bash for all users...", path: "../../.assets/provision/setup_profiles_allusers.sh"
      node.vm.provision "shell", name: "set up bash for current user...", path: "../../.assets/provision/setup_profiles_user.sh", privileged: false
    end
    if setup_pwsh
      node.vm.provision "shell", name: "install pwsh...", path: "../../.assets/provision/install_pwsh.sh"
      node.vm.provision "shell", name: "set up pwsh for all users...", path: "../../.assets/provision/setup_profiles_allusers.ps1"
      node.vm.provision "shell", name: "set up pwsh for current user...", path: "../../.assets/provision/setup_profiles_user.ps1", privileged: false
    end
    if upgrade_system
      node.vm.provision "shell", name: "upgrade system...", path: "../../.assets/provision/upgrade_system.sh"
    end
    # ~reload vm
    node.vm.provision :reload
  end
end
