# -*- mode: ruby -*-
# vi: set ft=ruby :

# *Variables
box      = "opensuse/Tumbleweed.x86_64"
provider = "libvirt"
boxname  = "tumbleweed"
# network configuration
net_name = "vagrant-33"
ip_addr  = "192.168.33.55"
# vm configuration
memory   = 4096
cpu      = 4

# calculate global variables
hostname = "vg-#{boxname.downcase}"

# *Scripts
script_install_packages = <<~SCRIPT
  zypper in -y btop nano
SCRIPT

script_configure_static_ip = <<~SCRIPT
  cat <<'EOF' >/etc/sysconfig/network/ifcfg-eth1
  BOOTPROTO='static'
  IPADDR='#{ip_addr}'
  NETMASK='255.255.255.0'
  DEVICE='eth1'
  PEERDNS='no'
  STARTMODE='auto'
  USERCONTROL='no'
  EOF
SCRIPT

# *VM provisioning
Vagrant.configure("2") do |config|
  # common config
  config.vm.provider provider do |libvirt|
    libvirt.default_prefix = "vg_"
    libvirt.management_network_keep = true
    libvirt.memory = memory
    libvirt.cpus = cpu
  end
  config.vm.define boxname do |node|
    identity_file = "#{Dir.pwd}/.vagrant/machines/#{boxname}/#{provider}/private_key"
    # node triggers
    node.trigger.after :reload do |trigger|
      trigger.info = "Add vagrant configuration to ssh config file..."
      trigger.run = {
        privileged: "false", powershell_elevated_interactive: "false",
        path: "../../.assets/trigger/set_ssh_config.ps1", :args => [ip_addr, hostname, identity_file]
      }
    end
    config.trigger.after :destroy do |trigger|
      trigger.info = "Cleaning up ssh config, known_hosts files and .vagrant directory..."
      trigger.run = {
        privileged: "false", powershell_elevated_interactive: "false",
        path: "../../.assets/trigger/delete_ssh_config.ps1", :args => [ip_addr, hostname]
      }
    end
    # node setup
    node.vm.box = box
    node.vm.hostname = hostname
    node.vm.network :private_network,
      :ip => ip_addr,
      :libvirt__network_name => net_name,
      :libvirt__dhcp_enabled => false,
      :libvirt__always_destroy => false,
      :autostart => true
    # node provision
    node.vm.provision "shell", name: "configure static ip", inline: script_configure_static_ip
    node.vm.provision "shell", name: "install base...", path: "../../.assets/provision/install_base.sh"
    node.vm.provision "shell", name: "install packages...", inline: script_install_packages
    node.vm.provision "shell", name: "install exa...", path: "../../.assets/provision/install_exa.sh"
    node.vm.provision "shell", name: "install bat...", path: "../../.assets/provision/install_bat.sh"
    node.vm.provision "shell", name: "install ripgrep...", path: "../../.assets/provision/install_ripgrep.sh"
    node.vm.provision "shell", name: "install yq", path: "../../.assets/provision/install_yq.sh"
    # ~setting up profiles
    node.vm.provision "shell", name: "install oh-my-posh...", path: "../../.assets/provision/install_omp.sh"
    node.vm.provision "shell", name: "install pwsh...", path: "../../.assets/provision/install_pwsh.sh"
    node.vm.provision "file", source: "../../.assets/config", destination: "/tmp/"
    node.vm.provision "shell", name: "set up pwsh for all users...", path: "../../.assets/provision/setup_profiles_allusers.ps1"
    node.vm.provision "shell", name: "set up bash for all users...", path: "../../.assets/provision/setup_profiles_allusers.sh"
    node.vm.provision "shell", name: "set up oh-my-posh...", path: "../../.assets/provision/setup_omp.sh"
    node.vm.provision "shell", name: "set up pwsh for current user...", path: "../../.assets/provision/setup_profiles_user.ps1", privileged: false
    node.vm.provision "shell", name: "set up bash for current user...", path: "../../.assets/provision/setup_profiles_user.sh", privileged: false
    node.vm.provision "ansible", playbook: "../../.assets/playbooks/setup_user_ssh.yaml"
    # ~upgrade system
    node.vm.provision "shell", name: "upgrade system...", path: "../../.assets/provision/upgrade_system.sh"
    # ~reload vm
    node.vm.provision :reload
  end
end
