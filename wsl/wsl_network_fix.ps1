#Requires -PSEdition Core
<#
.SYNOPSIS
Fix WSL network configuration for use with VPN interface.

.PARAMETER Distro
Name of the WSL distro to set up. If not specified, script will update all existing distros.
.PARAMETER InterfaceDescription
Description of the VPN interface.
.PARAMETER DisableSwap
Flag whether to disable swap in WSL.
.PARAMETER Revert
Revert changes and set generateResolvConf to 'true'.
.PARAMETER ShowConf
Print current configuration after changes.
This parameter shuts down WSL to make the changes take effect immediately.

.EXAMPLE
$Distro = 'Ubuntu'
wsl/wsl_network_fix.ps1 $Distro
wsl/wsl_network_fix.ps1 $Distro -ShowConf
wsl/wsl_network_fix.ps1 $Distro -DisableSwap
# :revert changes
wsl/wsl_network_fix.ps1 $Distro -Revert
wsl/wsl_network_fix.ps1 $Distro -Revert -ShowConf

.NOTES
# :save script example
./scripts_egsave.ps1 wsl/wsl_network_fix.ps1
# :override the existing script example if exists
./scripts_egsave.ps1 wsl/wsl_network_fix.ps1 -Force
# :open the example script in VSCode
code -r (./scripts_egsave.ps1 wsl/wsl_network_fix.ps1 -WriteOutput)
#>

[CmdletBinding()]
param (
    [Parameter(Mandatory, Position = 0)]
    [string]$Distro,

    [switch]$DisableSwap,

    [switch]$Revert,

    [switch]$ShowConf
)

begin {
    $ErrorActionPreference = 'Stop'
    # check if the script is running on Windows
    if (-not $IsWindows) {
        Write-Warning 'Run the script on Windows!'
        exit 0
    }

    # set location to workspace folder
    Push-Location "$PSScriptRoot/.."
    # import SetupUtils module
    Import-Module (Resolve-Path './modules/SetupUtils')

    # check if distro exist
    $distros = Get-WslDistro -FromRegistry
    if ($Distro -notin $distros.Name) {
        Write-Warning "The specified distro does not exist ($Distro)."
        exit 1
    }

    # determine if resolv.conf should be automatically generated
    if ($Revert) {
        $genResolv = 'true'
    } else {
        $genResolv = 'false'
    }

    # instantiate string builder
    $builder = [System.Text.StringBuilder]::new("# Generated by wsl_network_fix.ps1 on $((Get-Date).ToString('s'))`n")
}

process {
    # *replace wsl.conf
    Write-Host 'replacing wsl.conf...' -ForegroundColor DarkGreen -NoNewline
    $param = @{
        Distro   = $Distro
        ConfDict = [ordered]@{
            network = [ordered]@{
                generateResolvConf = $genResolv
            }
        }
    }
    Set-WslConf @param
    Write-Host 'done' -ForegroundColor DarkGreen

    # *recreate resolv.conf
    if (-not $Revert) {
        # get DNS servers for specified interface
        $props = @(
            @{ Name = 'Interface'; Expression = { $_.Description } }
            @{ Name = 'IPv4Address'; Expression = { $_.IPAddress } }
            @{ Name = 'DNSServer'; Expression = { $_.DNSServerSearchOrder } }
        )
        $ipConfig = Get-CimInstance Win32_NetworkAdapterConfiguration `
        | Where-Object -Property IPEnabled `
        | Select-Object $props

        if ($ipConfig) {
            $selCfg = $ipConfig | Get-ArrayIndexMenu -Value -Message 'Select network adapter:'
            $selCfg.DNSServer.ForEach({ $builder.AppendLine("nameserver $_") | Out-Null })
        } else {
            Write-Warning 'No active network adapter found!'
            return
        }
        # get DNS suffix search list
        $searchSuffix = (Get-DnsClientGlobalSetting).SuffixSearchList | Join-String -Separator ','
        if ($searchSuffix) {
            $builder.AppendLine("search $searchSuffix") | Out-Null
        }
        $builder.AppendLine('options timeout:1 retries:1') | Out-Null
        $resolvConf = $builder.ToString().Replace("`r`n", "`n")
        # shutdown distro for the wsl.conf changes to make effect
        if ($ShowConf) {
            Write-Host 'shutting down WSL...' -ForegroundColor DarkCyan
            wsl.exe --shutdown
        }
        Write-Host 'replacing resolv.conf...' -ForegroundColor DarkGreen -NoNewline
        # calculate command to update resolv.conf
        $cmd = [string]::Join("`n",
            'chattr -fi /etc/resolv.conf 2>/dev/null || true',
            'rm -f /etc/resolv.conf 2>/dev/null || true',
            "echo '$resolvConf' >/etc/resolv.conf",
            'chattr -f +i /etc/resolv.conf 2>/dev/null || true'
        )
        # save new resolv.conf settings
        wsl.exe -d $Distro --user root --exec bash -c $cmd
        Write-Host 'done' -ForegroundColor DarkGreen
    }

    # *disable wsl swap
    if ($DisableSwap) {
        Write-Host 'disabling swap' -ForegroundColor DarkGreen
        $wslCfgPath = [IO.Path]::Combine($HOME, '.wslconfig')
        try {
            $wslCfgContent = [IO.File]::ReadAllLines($wslCfgPath)
            if ($wslCfgContent | Select-String 'swap' -Quiet) {
                $wslCfgContent = $wslCfgContent -replace 'swap.+', 'swap=0'
            } else {
                $wslCfgContent += 'swap=0'
            }
            [IO.File]::WriteAllLines($wslCfgPath, $wslCfgContent)
        } catch {
            [IO.File]::WriteAllText($wslCfgPath, "[wsl2]`nswap=0")
        }
    }

    # *shutdown WSL
    if ($Revert) {
        wsl.exe -d $Distro --user root --exec bash -c 'chattr -fi /etc/resolv.conf 2>/dev/null || true'
        if ($ShowConf) {
            Write-Host 'shutting down WSL...' -ForegroundColor DarkCyan
            wsl.exe --shutdown
        }
    }
}

end {
    if ($Revert) {
        Write-Output 'resolv.conf configuration reverted'
    } elseif ($ipConfig) {
        if ($ShowConf) {
            Write-Host "`nwsl.conf" -ForegroundColor Magenta
            wsl.exe -d $Distro --exec cat /etc/wsl.conf | Write-Host
            Write-Host "`nresolv.conf" -ForegroundColor Magenta
            wsl.exe -d $Distro --exec cat /etc/resolv.conf | Write-Host
        } else {
            'resolv.conf configuration updated'
        }
    }
}
